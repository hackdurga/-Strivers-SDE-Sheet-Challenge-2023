#include <iostream>
#include <queue>
using namespace std;

void findMedian(int *arr, int n)
{
    priority_queue<int> left_heap; // max-heap to store the smaller half
    priority_queue<int, vector<int>, greater<int>> right_heap; // min-heap to store the larger half

    for (int i = 0; i < n; i++)
    {
        if (left_heap.empty() || arr[i] < left_heap.top())
            left_heap.push(arr[i]);
        else
            right_heap.push(arr[i]);

        // Balance the heaps
        if (left_heap.size() > right_heap.size() + 1)
        {
            right_heap.push(left_heap.top());
            left_heap.pop();
        }
        else if (right_heap.size() > left_heap.size() + 1)
        {
            left_heap.push(right_heap.top());
            right_heap.pop();
        }

        // Calculate and print the median
        if (left_heap.size() == right_heap.size())
        {
            int median = (left_heap.top() + right_heap.top()) / 2;
            cout << median << " ";
        }
        else if (left_heap.size() > right_heap.size())
        {
            cout << left_heap.top() << " ";
        }
        else
        {
            cout << right_heap.top() << " ";
        }
    }
}
