bool is_valid(int matrix[9][9], int row, int col, int digit) {
    // Check if digit already exists in the row
    for (int c = 0; c < 9; c++) {
        if (matrix[row][c] == digit)
            return false;
    }

    // Check if digit already exists in the column
    for (int r = 0; r < 9; r++) {
        if (matrix[r][col] == digit)
            return false;
    }

    // Check if digit already exists in the 3x3 sub-matrix
    int sub_matrix_start_row = 3 * (row / 3);
    int sub_matrix_start_col = 3 * (col / 3);
    for (int r = 0; r < 3; r++) {
        for (int c = 0; c < 3; c++) {
            if (matrix[sub_matrix_start_row + r][sub_matrix_start_col + c] == digit)
                return false;
        }
    }

    return true;
}

bool solve_sudoku(int matrix[9][9]) {
    for (int row = 0; row < 9; row++) {
        for (int col = 0; col < 9; col++) {
            if (matrix[row][col] == 0) {  // Empty cell
                for (int digit = 1; digit <= 9; digit++) {
                    if (is_valid(matrix, row, col, digit)) {
                        matrix[row][col] = digit;
                        if (solve_sudoku(matrix))
                            return true;
                        matrix[row][col] = 0;  // Backtrack
                    }
                }
                return false;  // No valid digit found for this cell
            }
        }
    }
    return true;  // All cells filled
}

bool isItSudoku(int matrix[9][9]) {
    return solve_sudoku(matrix);
}
