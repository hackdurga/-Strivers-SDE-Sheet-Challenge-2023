#include <vector>
#include <queue>

using namespace std;

int minTimeToRot(vector<vector<int>>& grid, int n, int m) {
    // Directions: up, down, left, right
    vector<int> dx = {-1, 1, 0, 0};
    vector<int> dy = {0, 0, -1, 1};

    int freshOranges = 0;  // Count of fresh oranges
    queue<pair<int, int>> rotten;  // Queue to store rotten oranges

    // Step 1: Count fresh oranges and enqueue initial rotten oranges
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (grid[i][j] == 1)
                freshOranges++;
            else if (grid[i][j] == 2)
                rotten.push({i, j});
        }
    }

    int minutes = 0;  // Time required for all oranges to rot

    // Step 2: BFS traversal to rot oranges
    while (!rotten.empty()) {
        int size = rotten.size();  // Current size of the queue represents the number of oranges in a level

        // Process all oranges in the current level
        for (int i = 0; i < size; i++) {
            pair<int, int> current = rotten.front();
            rotten.pop();

            // Check adjacent cells
            for (int j = 0; j < 4; j++) {
                int newRow = current.first + dx[j];
                int newCol = current.second + dy[j];

                // Check if the new position is within the grid bounds and the orange is fresh
                if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && grid[newRow][newCol] == 1) {
                    grid[newRow][newCol] = 2;  // Rot the orange
                    freshOranges--;
                    rotten.push({newRow, newCol});
                }
            }
        }

        if (!rotten.empty())
            minutes++;  // Increment time if there are more levels with rotten oranges
    }

    // Step 3: Check if any fresh oranges are left
    if (freshOranges > 0)
        return -1;  // Not all oranges can be rotten
    else
        return minutes;
}
