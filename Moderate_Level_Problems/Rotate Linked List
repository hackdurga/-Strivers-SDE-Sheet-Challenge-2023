/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node *rotate(Node *head, int k) {
    // If the list is empty or rotation count is 0, return the head as it is
    if (head == nullptr || k == 0) {
        return head;
    }
    
    // Find the length of the list
    int length = 1;
    Node *tail = head;
    while (tail->next != nullptr) {
        tail = tail->next;
        length++;
    }
    
    // Adjust k to the effective rotation value
    k = k % length;
    if (k == 0) {
        return head; // No rotation needed
    }
    
    // Locate the new tail and the node just before the new head
    Node *newTail = head;
    for (int i = 1; i < length - k; i++) {
        newTail = newTail->next;
    }
    Node *newHead = newTail->next;
    
    // Rearrange the pointers
    tail->next = head;
    newTail->next = nullptr;
    
    return newHead;
}
