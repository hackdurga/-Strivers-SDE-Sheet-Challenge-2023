#include <bits/stdc++.h>

using namespace std;

struct ArrayElement {
    int value;      // The value of the element
    int arrayIdx;   // The index of the array the element belongs to
    int elementIdx; // The index of the element in its array

    ArrayElement(int val, int arrIdx, int elemIdx) : value(val), arrayIdx(arrIdx), elementIdx(elemIdx) {}
};

struct Compare {
    bool operator()(const ArrayElement& a, const ArrayElement& b) {
        return a.value > b.value; // Min-heap based on the value of the element
    }
};

vector<int> mergeKSortedArrays(vector<vector<int>>& kArrays, int k) {
    priority_queue<ArrayElement, vector<ArrayElement>, Compare> minHeap;

    // Insert the first element from each array into the min-heap
    for (int i = 0; i < k; i++) {
        if (!kArrays[i].empty()) {
            minHeap.push(ArrayElement(kArrays[i][0], i, 0));
        }
    }

    vector<int> mergedArray;

    while (!minHeap.empty()) {
        ArrayElement current = minHeap.top();
        minHeap.pop();

        int value = current.value;
        int arrayIdx = current.arrayIdx;
        int elementIdx = current.elementIdx;

        mergedArray.push_back(value);

        // Move to the next element in the current array
        elementIdx++;
        
        // If there are more elements in the current array, insert the next element into the min-heap
        if (elementIdx < kArrays[arrayIdx].size()) {
            minHeap.push(ArrayElement(kArrays[arrayIdx][elementIdx], arrayIdx, elementIdx));
        }
    }

    return mergedArray;
}
