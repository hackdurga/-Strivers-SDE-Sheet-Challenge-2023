/************************************************************
   
   Following is the TreeNode class structure
   
   template <typename T>
   class TreeNode
   { 
   public:
        T data; 
        TreeNode<T> *left;
        TreeNode<T> *right;
   
        TreeNode(T data) 
  		{ 
            this -> data = data; 
            left = NULL; 
            right = NULL; 
        }
   };
   
   
 ************************************************************/

template<typename T>
TreeNode<T>* buildTree(vector<T>& postOrder, vector<T>& inOrder, int postStart, int postEnd, int inStart, int inEnd) {
    if (postStart > postEnd) {
        return NULL;
    }

    T rootValue = postOrder[postEnd];
    TreeNode<T>* root = new TreeNode<T>(rootValue);

    int rootIndex = -1;
    for (int i = inStart; i <= inEnd; i++) {
        if (inOrder[i] == rootValue) {
            rootIndex = i;
            break;
        }
    }

    int leftSubtreeSize = rootIndex - inStart;

    root->left = buildTree(postOrder, inOrder, postStart, postStart + leftSubtreeSize - 1, inStart, rootIndex - 1);
    root->right = buildTree(postOrder, inOrder, postStart + leftSubtreeSize, postEnd - 1, rootIndex + 1, inEnd);

    return root;
}

template<typename T>
TreeNode<T>* getTreeFromPostorderAndInorder(vector<T>& postOrder, vector<T>& inOrder) {
    int postStart = 0;
    int postEnd = postOrder.size() - 1;
    int inStart = 0;
    int inEnd = inOrder.size() - 1;

    return buildTree(postOrder, inOrder, postStart, postEnd, inStart, inEnd);
}
