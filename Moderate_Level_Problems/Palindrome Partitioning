#include <bits/stdc++.h>
using namespace std;

bool isPalindrome(string s) {
    int i = 0, j = s.length() - 1;
    while (i < j) {
        if (s[i] != s[j])
            return false;
        i++;
        j--;
    }
    return true;
}

void generatePartitions(string s, int start, vector<string> &currentPartition, vector<vector<string>> &result) {
    if (start >= s.length()) {
        result.push_back(currentPartition);
        return;
    }

    for (int i = start; i < s.length(); i++) {
        string substring = s.substr(start, i - start + 1);
        if (isPalindrome(substring)) {
            currentPartition.push_back(substring);
            generatePartitions(s, i + 1, currentPartition, result);
            currentPartition.pop_back();
        }
    }
}

vector<vector<string>> partition(string &s) {
    vector<vector<string>> result;
    vector<string> currentPartition;
    generatePartitions(s, 0, currentPartition, result);
    return result;
}
