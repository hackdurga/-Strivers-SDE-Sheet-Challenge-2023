long long mergeAndCount(long long* arr, int start, int mid, int end) {
    long long invCount = 0;
    int i = start;
    int j = mid + 1;
    int k = 0;
    long long temp[end - start + 1];

    while (i <= mid && j <= end) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            invCount += mid - i + 1;
        }
    }

    while (i <= mid) {
        temp[k++] = arr[i++];
    }

    while (j <= end) {
        temp[k++] = arr[j++];
    }

    for (int p = start, q = 0; p <= end; p++, q++) {
        arr[p] = temp[q];
    }

    return invCount;
}

long long mergeSortAndCount(long long* arr, int start, int end) {
    long long invCount = 0;

    if (start < end) {
        int mid = start + (end - start) / 2;

        invCount += mergeSortAndCount(arr, start, mid);
        invCount += mergeSortAndCount(arr, mid + 1, end);

        invCount += mergeAndCount(arr, start, mid, end);
    }

    return invCount;
}

long long getInversions(long long* arr, int n) {
    return mergeSortAndCount(arr, 0, n - 1);
}
