#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
void backtrack(vector<int>& arr, int target, int start, vector<int>& curr_combination, vector<vector<int>>& combinations) {
    if (target == 0) {
        combinations.push_back(curr_combination);
        return;
    }

    for (int i = start; i < arr.size() && arr[i] <= target; i++) {
        if (i > start && arr[i] == arr[i - 1])
            continue; // Skip duplicates to avoid duplicate combinations

        curr_combination.push_back(arr[i]);
        backtrack(arr, target - arr[i], i + 1, curr_combination, combinations);
        curr_combination.pop_back();
    }
}
vector<vector<int>> combinationSum2(vector<int> &arr, int n, int target)
{
	// Write your code here.
	sort(arr.begin(), arr.end()); // Sort the array in non-decreasing order
    vector<vector<int>> combinations;
    vector<int> curr_combination;
    backtrack(arr, target, 0, curr_combination, combinations);
    return combinations;
}
