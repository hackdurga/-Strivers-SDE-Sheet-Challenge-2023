#include <bits/stdc++.h>
using namespace std;

string longestPalinSubstring(string str) {
    // Check if the string is empty
    if (str.empty()) {
        return "";
    }

    int start = 0;  // Start index of the longest palindromic substring
    int maxLength = 1;  // Length of the longest palindromic substring

    // Expand around centers
    for (int i = 0; i < str.length(); i++) {
        // For odd-length palindromes
        int left = i;
        int right = i;
        while (left >= 0 && right < str.length() && str[left] == str[right]) {
            int currentLength = right - left + 1;
            if (currentLength > maxLength) {
                start = left;
                maxLength = currentLength;
            }
            left--;
            right++;
        }

        // For even-length palindromes
        left = i;
        right = i + 1;
        while (left >= 0 && right < str.length() && str[left] == str[right]) {
            int currentLength = right - left + 1;
            if (currentLength > maxLength) {
                start = left;
                maxLength = currentLength;
            }
            left--;
            right++;
        }
    }

    return str.substr(start, maxLength);
}
